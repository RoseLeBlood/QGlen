#include "gamewindow.h"

#include <QtCore/QCoreApplication>
#include <QtGui/QOpenGLContext>
#include <QtGui/QOpenGLPaintDevice>
#include <QtGui/QPainter>
#include <Qtimer>
#include <QElapsedTimer>

#include <qdebug.h>

#include "gamestatemanager.h"

GameWindow::GameWindow(QWindow *parent)
    : QWindow(parent)
    , m_update_pending(false)
    , m_context(0)
    , m_device(0),
      m_gameStateManager(new GameStateManager(this))
{
    setSurfaceType(QWindow::OpenGLSurface);
    m_pTimer = new QElapsedTimer();
}
GameWindow::~GameWindow()
{
    delete m_device;
    delete m_pTimer;
}


void GameWindow::Initialize()
{
}
void GameWindow::Move(double renderTime, double elapsedTime)
{
    m_gameStateManager->Move(renderTime, elapsedTime);
}
void GameWindow::Render(QPainter *painter)
{
    m_gameStateManager->Draw(painter);
}
void GameWindow::SwitchGameState(QString name)
{
    m_gameStateManager->Switch(name);
}

void GameWindow::renderIntern()
{
    if (!m_device)
        m_device = new QOpenGLPaintDevice;

    Move(m_runTime, m_pTimer->nsecsElapsed());

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

    m_device->setSize(size());

    QPainter painter(m_device);
    Render(&painter);
}


bool GameWindow::event(QEvent *event)
{
    switch (event->type()) {
    case QEvent::UpdateRequest:
        m_update_pending = false;
        renderEvent();
        return true;
    default:
        return QWindow::event(event);
    }
}

void GameWindow::exposeEvent(QExposeEvent *event)
{
    Q_UNUSED(event);

    if (isExposed())
    {
        renderEvent();
    }
}
#include <QDateTime>

double _current = 0, _previous = 0;
double _elapsed = 0;
void GameWindow::renderEvent()
{
    _current = QDateTime.msecsTo(QDateTime::currentDateTime());
    _elapsed = _current - _previous;


    if (!isExposed())
        return;

    bool needsInitialize = false;

    if (!m_context) {
        m_context = new QOpenGLContext(this);
        m_context->setFormat(requestedFormat());
        m_context->create();


        needsInitialize = true;
    }

    m_context->makeCurrent(this);

    if (needsInitialize) {
        initializeOpenGLFunctions();
        Initialize();
    }

    renderIntern();

    m_context->swapBuffers(this);

    if (!m_update_pending) {
        m_update_pending = true;
        QCoreApplication::postEvent(this, new QEvent(QEvent::UpdateRequest));
    }
    m_runTime += m_pTimer->nsecsElapsed();
}

