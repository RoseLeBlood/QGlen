{
    "FragmentCode": "#version 330 core\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;  \n    vec3 emission; \n    float shininess;\n}; \n\nstruct Light {\n    vec3 position;\n\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    int enable;\n};\n\nin vec3 FragPos;\nin vec3 Normal;  \n  \nout vec4 color;\n  \nuniform vec3 viewPos;\nuniform Material material;\nuniform Light light;\nuniform float gamma = 2.2;\nvoid main()\n{\n    // Ambient\n    vec3 ambient = light.ambient * material.ambient;\n    \n    // Diffuse\n    vec3 norm = normalize(Normal);\n    vec3 lightDir = normalize(light.position - FragPos);\n    float diff = max(dot(norm, lightDir), 0.0);\n    vec3 diffuse = light.diffuse * (diff * material.diffuse);\n    \n    // Specular\n    vec3 viewDir = normalize(viewPos - FragPos);\n    vec3 reflectDir = reflect(-lightDir, norm);  \n \n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n    vec3 specular = light.specular * spec *  material.specular;  \n        \n\n    vec3 result = ambient + diffuse + specular + material.emission;\n    result = pow(result, vec3(1.0 / gamma));\n    color = vec4(result, 1.0f);\n}",
    "GeometryCode": "",
    "Name": "Basic",
    "VertexCode": "#version 330 core\nlayout (location = 0) in vec3 position;\nlayout (location = 1) in vec3 normal;\n\nout vec3 Normal;\nout vec3 FragPos;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main()\n{\n    gl_Position = projection * view *  model * vec4(position, 1.0f);\n    FragPos = vec3(model * vec4(position, 1.0f));\n    Normal = mat3(transpose(inverse(model))) * normal;\n}"
}
